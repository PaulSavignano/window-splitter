{"version":3,"sources":["WindowSplitter/useResizer.ts","WindowSplitter/WindowPane.tsx","WindowSplitter/useMouseDown.ts","WindowSplitter/WindowSplitter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","flex","useResizer","onMouseDown","useState","previousElementStyle","setPreviousElementStyle","resizerRef","useRef","previousElementRef","useMemo","resizerElementProps","ref","Window","child","dividerClassName","Child","React","cloneElement","style","role","className","useSplitter","orientation","activePreviousElementRef","activeResizerRef","activeSetStyle","isResizing","onMouseMove","useCallback","e","current","offsetTop","height","clientY","offsetLeft","width","clientX","minWidth","Error","onMouseUp","useEffect","document","addEventListener","removeEventListener","useStyles","makeStyles","theme","createStyles","horizontal","display","flexFlow","overflowY","vertical","dividerHorizontal","cursor","border","dividerVertical","classNames","args","filter","Boolean","join","WindowSplitter","children","useMouseDown","classes","Children","map","WindowPane","App","Box","bgcolor","boxShadow","color","component","p","Typography","variant","m","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c0b673e.chunk.js","sourcesContent":["import {\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\n\ninterface State {\n  flex?: string,\n  height?: number,\n  minWidth?: number\n  width?: number,\n}\n\nconst initialState: State = {\n  flex: '1 1 auto'\n}\n\ninterface UseResizer {\n  onMouseDown: Function\n}\n\nconst useResizer = ({ onMouseDown }: UseResizer) => {\n  const [previousElementStyle, setPreviousElementStyle] = useState(initialState)\n  const resizerRef = useRef<HTMLDivElement>(null)\n  const previousElementRef = useRef<HTMLDivElement>(null)\n  return useMemo(() => ({\n    previousElementStyle,\n    previousElementRef,\n    resizerElementProps: {\n      ref: resizerRef,\n      onMouseDown: () => onMouseDown({ resizerRef, previousElementRef, setPreviousElementStyle }),\n    },\n  }), [onMouseDown, previousElementStyle])\n}\n\nexport default useResizer","import React from 'react'\n\nimport useResizer from './useResizer'\n\ninterface WindowProps {\n  child: React.ReactNode\n  onMouseDown: Function\n  dividerClassName: string\n}\n\nconst Window: React.FC<WindowProps> = ({ child, onMouseDown, dividerClassName }) => {\n  const { resizerElementProps, previousElementStyle, previousElementRef } = useResizer({ onMouseDown })\n  const Child = React.cloneElement(child as React.ReactElement<any>, { ref: previousElementRef, style: previousElementStyle })\n  return (\n    <>\n      {Child}\n      <div {...resizerElementProps} role=\"separator\" className={dividerClassName} />\n    </>\n  )\n}\n\nexport default Window","import {\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react'\n\nfunction useSplitter({ orientation = 'vertical' }) {\n  const activePreviousElementRef = useRef<HTMLDivElement | null>(null)\n  const activeResizerRef = useRef<HTMLDivElement | null>(null)\n  const activeSetStyle = useRef(({ }) => { })\n  const isResizing = useRef(false)\n\n  const onMouseMove = useCallback((e) => {\n    if (!isResizing.current || !activeResizerRef.current || !activePreviousElementRef.current) return\n    switch (orientation) {\n      case 'vertical': {\n        const offsetTop = activePreviousElementRef.current.offsetTop\n        const height = e.clientY - offsetTop\n        return activeSetStyle.current({ height })\n      }\n      case 'horizontal': {\n        const offsetLeft = activePreviousElementRef.current.offsetLeft\n        const width = e.clientX - offsetLeft\n        return activeSetStyle.current({ minWidth: width })\n      }\n      default:\n        throw Error('Orientation not provided')\n    }\n  }, [orientation])\n\n  const onMouseDown = useCallback(({ resizerRef, previousElementRef, setPreviousElementStyle }) => {\n    activePreviousElementRef.current = previousElementRef.current\n    activeResizerRef.current = resizerRef.current\n    activeSetStyle.current = setPreviousElementStyle\n    isResizing.current = true\n  }, [])\n\n  const onMouseUp = useCallback((e) => {\n    activePreviousElementRef.current = null\n    activeResizerRef.current = null\n    activeSetStyle.current = ({ }) => { }\n    isResizing.current = false\n  }, [])\n\n  useEffect(() => {\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    return () => {\n      document.removeEventListener('mouseup', onMouseUp);\n      document.removeEventListener('mousemove', onMouseMove);\n    }\n  }, [onMouseMove, onMouseUp])\n\n  return onMouseDown\n}\n\nexport default useSplitter","import React from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport WindowPane from './WindowPane'\nimport useMouseDown from './useMouseDown'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    horizontal: {\n      display: 'flex',\n      flexFlow: 'row',\n      overflowY: 'auto',\n    },\n    vertical: {\n      display: 'flex',\n      flexFlow: 'column',\n      height: '100%'\n    },\n    dividerHorizontal: {\n      cursor: 'col-resize',\n      border: '2px solid black',\n    },\n    dividerVertical: {\n      cursor: 'row-resize',\n      width: '100%',\n      border: '2px solid black',\n    }\n  }),\n);\n\n\ninterface WindowSplitterProps {\n  orientation: string\n  className?: string,\n  style?: { [key: string]: string | number }\n}\n\ninterface ObjectMap {\n  [key: string]: string\n}\n\nconst classNames = (...args: any[]) => args.filter(Boolean).join(' ')\n\nconst WindowSplitter: React.FC<WindowSplitterProps> = ({\n  children,\n  className,\n  style,\n  orientation,\n}) => {\n  const onMouseDown = useMouseDown({ orientation })\n  const classes: ObjectMap = useStyles()\n  const dividerClassName = orientation === 'horizontal' ? classes.dividerHorizontal : classes.dividerVertical\n  return (\n    <div\n      className={classNames(classes[orientation], className)}\n      style={style}\n    >\n      {React.Children.map(children, (child: React.ReactNode) => (\n        <WindowPane\n          child={child}\n          onMouseDown={onMouseDown}\n          dividerClassName={dividerClassName}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default WindowSplitter\n","import React from 'react';\nimport Box from '@material-ui/core/Box'\nimport WindowSplitter from './WindowSplitter'\nimport Typography from '@material-ui/core/Typography'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Box\n        bgcolor=\"primary.main\"\n        boxShadow={2}\n        color=\"primary.contrastText\"\n        component=\"header\"\n        p={1}\n      >\n        <Typography variant=\"h4\" component=\"h1\">Window Splitter</Typography>\n      </Box>\n      <main>\n        <Box>\n          <Box m={1} p={1}>\n            <Typography variant=\"h5\" component=\"h3\">Horizontal Splitting</Typography>\n          </Box>\n          <WindowSplitter className=\"WindowSplitter\" orientation=\"horizontal\">\n            <Box boxShadow={2}>\n              <Box p={2}>\n                <Typography>One</Typography>\n              </Box>\n            </Box>\n            <Box boxShadow={2}>\n              <Box p={2} >\n                <Typography>Two</Typography>\n              </Box>\n            </Box>\n            <Box boxShadow={2}>\n              <Box p={2}>\n                <Typography>Three</Typography>\n              </Box>\n            </Box>\n          </WindowSplitter>\n        </Box>\n        <Box>\n          <Box m={1} p={1}>\n            <Typography variant=\"h5\" component=\"h3\">Vertical Splitting</Typography>\n          </Box>\n          <WindowSplitter className=\"WindowSplitter\" orientation=\"vertical\">\n            <Box boxShadow={2}>\n              <Box p={2}>\n                <Typography>One</Typography>\n              </Box>\n            </Box>\n            <Box boxShadow={2}>\n              <Box p={2} >\n                <Typography>Two</Typography>\n              </Box>\n            </Box>\n            <Box boxShadow={2}>\n              <Box p={2} >\n                <Typography>Three</Typography>\n              </Box>\n            </Box>\n\n          </WindowSplitter>\n        </Box>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}